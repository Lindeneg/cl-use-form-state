"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = exports.getValidator = exports.countNumbers = exports.countUpperCase = exports.count = exports.ValidationType = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _validationFunc;

var ValidationType;
exports.ValidationType = ValidationType;

(function (ValidationType) {
  ValidationType["Require"] = "isRequired";
  ValidationType["MinLength"] = "minLength";
  ValidationType["MaxLength"] = "maxLength";
  ValidationType["MinValue"] = "minValue";
  ValidationType["MaxValue"] = "maxValue";
  ValidationType["MinUppercaseCharacters"] = "minUppercaseCharacters";
  ValidationType["MaxUppercaseCharacters"] = "maxUppercaseCharacters";
  ValidationType["MinNumericalSymbols"] = "minNumericalSymbols";
  ValidationType["MaxNumericalSymbols"] = "maxNumericalSymbols";
  ValidationType["CustomRule"] = "customRule";
})(ValidationType || (exports.ValidationType = ValidationType = {}));

var count = function count(target, callback) {
  var result = 0;

  for (var i = 0; i < target.length; i++) {
    if (callback(target[i])) {
      result++;
    }
  }

  return result;
};

exports.count = count;

var countUpperCase = function countUpperCase(target) {
  return count(target, function (e) {
    return e >= 'A' && e <= 'Z';
  });
};

exports.countUpperCase = countUpperCase;

var countNumbers = function countNumbers(target) {
  return count(target, function (e) {
    var n = parseInt(e);
    return typeof n === 'number' && !Number.isNaN(n);
  });
};

exports.countNumbers = countNumbers;
var validationFunc = (_validationFunc = {}, (0, _defineProperty2["default"])(_validationFunc, ValidationType.Require, function (value, isValid) {
  return isValid && value.toString().trim().length > 0;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MinLength, function (value, isValid, validator) {
  return isValid && value.toString().trim().length >= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MaxLength, function (value, isValid, validator) {
  return isValid && value.toString().trim().length <= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MinValue, function (value, isValid, validator) {
  return isValid && +value >= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MaxValue, function (value, isValid, validator) {
  return isValid && +value <= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MinUppercaseCharacters, function (value, isValid, validator) {
  var uppercaseChars = countUpperCase(value.toString());
  return isValid && uppercaseChars >= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MaxUppercaseCharacters, function (value, isValid, validator) {
  var uppercaseChars = countUpperCase(value.toString());
  return isValid && uppercaseChars <= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MinNumericalSymbols, function (value, isValid, validator) {
  var numericalSymbols = countNumbers(value.toString());
  return isValid && numericalSymbols >= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.MaxNumericalSymbols, function (value, isValid, validator) {
  var numericalSymbols = countNumbers(value.toString());
  return isValid && numericalSymbols <= validator.value;
}), (0, _defineProperty2["default"])(_validationFunc, ValidationType.CustomRule, function (value, isValid, validator, state) {
  return isValid && typeof validator.value === 'function' && validator.value(value, state);
}), _validationFunc);

var getValidator = function getValidator(type, value) {
  return {
    type: type,
    value: value
  };
};

exports.getValidator = getValidator;

var validate = function validate(value, validators, state) {
  var isValid = true;
  validators.forEach(function (validator) {
    var func = validationFunc[validator.type];

    if (typeof func !== 'undefined') {
      isValid = func(value, isValid, validator, state);
    }
  });
  return isValid;
};

exports.validate = validate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
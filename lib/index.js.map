{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/form.validation.ts","../src/form.hook.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { FormState, FormValueType, FormEntryConstraint } from './form.hook';\n\n/* Predefined validation options. However, a custom rule, which takes a function, can be created\n   and thus any validation rule that is desired, can be created. */\nexport enum ValidationType {\n    Require = 'isRequired',\n    MinLength = 'minLength',\n    MaxLength = 'maxLength',\n    MinValue = 'minValue',\n    MaxValue = 'maxValue',\n    MinUppercaseCharacters = 'minUppercaseCharacters',\n    MaxUppercaseCharacters = 'maxUppercaseCharacters',\n    MinNumericalSymbols = 'minNumericalSymbols',\n    MaxNumericalSymbols = 'maxNumericalSymbols',\n    CustomRule = 'customRule'\n}\n\n/* Function that is tied to a custom rule. Must return a boolean and will always receive two arguments: \n   value: current value of the input field where this custom rule is tied \n   state: the most updated state of the entire form. */\nexport type CustomValidationRule<T extends FormValueType, S extends FormEntryConstraint> = (\n    value: T,\n    state: FormState<S>\n) => boolean;\n\nexport type ValidationValue<T extends FormValueType, S extends FormEntryConstraint> =\n    | FormValueType\n    | CustomValidationRule<T, S>;\n\nexport interface Validator {\n    type: ValidationType;\n    value: ValidationValue<FormValueType, FormEntryConstraint>;\n}\n\nexport type ValidationFunc = (\n    value: FormValueType,\n    isValid: boolean,\n    validator: Validator,\n    state: FormState<FormEntryConstraint>\n) => boolean;\n\nexport const count = (target: string, callback: (entry: string) => boolean): number => {\n    let result = 0;\n    for (let i = 0; i < target.length; i++) {\n        if (callback(target[i])) {\n            result++;\n        }\n    }\n    return result;\n};\n\nexport const countUpperCase = (target: string): number => {\n    return count(target, (e) => e >= 'A' && e <= 'Z');\n};\n\nexport const countNumbers = (target: string): number => {\n    return count(target, (e) => {\n        const n = parseInt(e);\n        return typeof n === 'number' && !Number.isNaN(n);\n    });\n};\n\nconst validationFunc: { [key: string]: ValidationFunc } = {\n    [ValidationType.Require]: (value, isValid) => {\n        return isValid && value.toString().trim().length > 0;\n    },\n    [ValidationType.MinLength]: (value, isValid, validator) => {\n        if (Array.isArray(value)) {\n            return isValid && value.length >= validator.value;\n        }\n        return isValid && value.toString().trim().length >= validator.value;\n    },\n    [ValidationType.MaxLength]: (value, isValid, validator) => {\n        if (Array.isArray(value)) {\n            return isValid && value.length <= validator.value;\n        }\n        return isValid && value.toString().trim().length <= validator.value;\n    },\n    [ValidationType.MinValue]: (value, isValid, validator) => {\n        return isValid && +value >= validator.value;\n    },\n    [ValidationType.MaxValue]: (value, isValid, validator) => {\n        return isValid && +value <= validator.value;\n    },\n    [ValidationType.MinUppercaseCharacters]: (value, isValid, validator) => {\n        const uppercaseChars: number = countUpperCase(value.toString());\n        return isValid && uppercaseChars >= validator.value;\n    },\n    [ValidationType.MaxUppercaseCharacters]: (value, isValid, validator) => {\n        const uppercaseChars: number = countUpperCase(value.toString());\n        return isValid && uppercaseChars <= validator.value;\n    },\n    [ValidationType.MinNumericalSymbols]: (value, isValid, validator) => {\n        const numericalSymbols: number = countNumbers(value.toString());\n        return isValid && numericalSymbols >= validator.value;\n    },\n    [ValidationType.MaxNumericalSymbols]: (value, isValid, validator) => {\n        const numericalSymbols: number = countNumbers(value.toString());\n        return isValid && numericalSymbols <= validator.value;\n    },\n    [ValidationType.CustomRule]: (value, isValid, validator, state) => {\n        return isValid && typeof validator.value === 'function' && validator.value(value, state);\n    }\n};\n\nexport const validateState = (state: FormState<FormEntryConstraint>): boolean => {\n    let isValid = true;\n    for (const key in state.inputs) {\n        isValid = isValid && state.inputs[key].isValid;\n    }\n    return isValid;\n};\n\nexport const getValidator = (\n    type: ValidationType,\n    value: ValidationValue<FormValueType, FormEntryConstraint>\n): Validator => ({\n    type,\n    value\n});\n\nexport const validate = (\n    value: FormValueType,\n    validators: Validator[],\n    state: FormState<FormEntryConstraint>\n): boolean => {\n    let isValid = true;\n    validators.forEach((validator) => {\n        const func: ValidationFunc | undefined = validationFunc[validator.type];\n        if (typeof func !== 'undefined') {\n            isValid = func(value, isValid, validator, state);\n        }\n    });\n    return isValid;\n};\n","import { useReducer, useCallback, Reducer } from 'react';\n\nimport {\n    Validator,\n    ValidationType,\n    CustomValidationRule,\n    getValidator,\n    validate,\n    validateState\n} from './form.validation';\n\nenum FormAction {\n    INPUT_CHANGE = 'INPUT_CHANGE',\n    INPUT_TOUCH = 'INPUT_TOUCH',\n    SET_FORM = 'SET_FORM'\n}\n\ninterface FormPayload extends Pick<FormEntryState<FormValueType>, 'value'> {\n    readonly id: string;\n    readonly state?: FormState<FormEntryConstraint>;\n}\n\ntype FormElementConstraint =\n    | HTMLInputElement\n    | HTMLTextAreaElement\n    | HTMLSelectElement\n    | HTMLOptionElement;\n\ntype ReducerAction = { type: FormAction; payload: FormPayload };\n\n/* This is the base for any input entry in a 'formState'. In other words\n   all input entries will have these properties available. */\ntype FormEntryState<T extends FormValueType> = {\n    value: T;\n    isValid: boolean;\n    isTouched: boolean;\n    readonly validators: Validator[];\n    readonly connectedFields: string[];\n};\n\nexport type GetInputOptions<\n    T extends FormValueType,\n    S extends FormEntryConstraint = Record<string, FormValueType>\n> = {\n    [key: string]: T | number | boolean | CustomValidationRule<T, S> | string[] | undefined;\n    minLength?: number;\n    maxLength?: number;\n    minValue?: number;\n    maxValue?: number;\n    minUppercaseCharacters?: number;\n    maxUppercaseCharacters?: number;\n    minNumericalSymbols?: number;\n    maxNumericalSymbols?: number;\n    isRequired?: boolean;\n    isValid?: boolean;\n    isTouched?: boolean;\n    customRule?: CustomValidationRule<T, S>;\n    connectFields?: string[];\n};\n\n/* The type of object returned by useForm when initialized. */\nexport type UseForm<S extends FormEntryConstraint> = {\n    /**\n     * formState' will always have properties 'inputs' and 'isValid'\n     * available while the 'inputs' property, if non-empty, will\n     * have keys that yields an object of type FormEntryState\n     */\n    formState: FormState<S>;\n\n    /**\n     * Handles touch events. Can be used with prop 'onBlur', for example:\n     *\n     * \\<input onBlur={onTouchHandler} /\\>\n     *\n     */\n    onTouchHandler: React.FocusEventHandler<FormElementConstraint>;\n\n    /**\n     * Handles change events. Can be used with prop 'onChange', for example:\n     *\n     * \\<input onChange={onChangeHandler} /\\>\n     *\n     */\n    onChangeHandler: React.ChangeEventHandler<FormElementConstraint>;\n\n    /**\n     * Overwrite existing inputs by setting new ones:\n     *\n     * setFormState({\n     *     ...newInputs\n     * })\n     *\n     * Or add to current inputs:\n     *\n     * setFormState({\n     *     ...formState.inputs,\n     *     ...newInputs\n     * })\n     *\n     * @param state Object with the new FormState\n     */\n    setFormState: (state: FormState<S> | Inputs<S>) => void;\n};\n\nexport type Inputs<T extends FormEntryConstraint> = { [K in keyof T]: FormEntryState<T[K]> };\n\n// Supported input vales. Can be extended if need be.\nexport type FormValueType = string | string[] | number | boolean | File;\n\n/* Property names and types of inputs, for example:\n   { password: string; age: number; isHappy: boolean; } */\nexport type FormEntryConstraint = { [key: string]: FormValueType };\n\nexport type FormState<T extends FormEntryConstraint> = {\n    inputs: Inputs<T>;\n    isValid: boolean;\n};\n\n/**\n * Get an object of type FormEntryState by just defining the input type, initial value and options.\n *\n * @param initialValue - initial value of the input entry.\n * @param options      - (optional) options for initial input state and validation\n * @returns Object of type FormEntryState\n */\nexport function getInput<\n    T extends FormValueType,\n    S extends FormEntryConstraint = Record<string, FormValueType>\n>(initialValue: T, options?: GetInputOptions<T, S>): FormEntryState<T> {\n    const parsedOptions: Omit<FormEntryState<T>, 'value'> = {\n        isValid: false,\n        isTouched: false,\n        validators: [],\n        connectedFields: options?.connectFields || []\n    };\n    if (typeof options !== 'undefined') {\n        const keys = Object.keys(options);\n        parsedOptions.isTouched = !!options.isTouched;\n        parsedOptions.isValid = !!options.isValid;\n        keys.forEach((key) => {\n            if (!['isValid', 'isTouched', 'connectedFields'].includes(key)) {\n                parsedOptions.validators.push(\n                    getValidator(key as ValidationType, options[key] as T)\n                );\n            }\n        });\n    }\n    return {\n        ...parsedOptions,\n        value: initialValue\n    };\n}\n\n/**\n * Handle all connected fields tied to a certain input. This is useful for the following reason:\n *\n * If we have input A and input B and input B is dependent upon input A. Then we'd like to be able to\n * run the validation for input B each time the value of input A changes.\n *\n * @param state   - current FormState where the connected inputs can be found\n * @param targetId - Id of the owning input (input A in the example above)\n * @returns An object with entry keys and their updated object of type FormEntryState\n */\nconst handleConnectedFields = (\n    state: FormState<FormEntryConstraint>,\n    targetId: string\n): { [key: string]: FormEntryState<FormValueType> } => {\n    try {\n        const newInputState = { ...state.inputs };\n        // find connected fields from the targetId\n        newInputState[targetId].connectedFields.forEach((connectedFieldId) => {\n            // if the connected field exists\n            if (typeof newInputState[connectedFieldId] !== 'undefined') {\n                // then validate it given the specified state\n                newInputState[connectedFieldId] = {\n                    ...newInputState[connectedFieldId],\n                    isValid: validate(\n                        newInputState[connectedFieldId].value,\n                        newInputState[connectedFieldId].validators,\n                        state\n                    )\n                };\n            }\n        });\n        return newInputState;\n    } catch (err) {\n        process.env.NODE_ENV !== 'production' && console.error(err);\n        return state.inputs;\n    }\n};\n\n/**\n * Handle changes to FormState given an action associated with a payload.\n *\n * @param state Object with current FormState\n * @param action FormAction and FormPayload to handle\n * @returns Object with the updated FormState\n */\nfunction formReducer<S extends FormState<FormEntryConstraint>>(state: S, action: ReducerAction): S {\n    const pl = action.payload;\n    switch (action.type) {\n        case FormAction.INPUT_CHANGE:\n            try {\n                // copy the current state, update the entry with the specified payload Id and validate it.\n                const newState: S = {\n                    ...state,\n                    inputs: {\n                        ...state.inputs,\n                        [pl.id]: {\n                            ...state.inputs[pl.id],\n                            value: pl.value,\n                            isValid: validate(pl.value, state.inputs[pl.id].validators, state)\n                        }\n                    }\n                };\n                // copy the inputs and validate connected fields given the now updated state.\n                newState.inputs = {\n                    ...newState.inputs,\n                    ...handleConnectedFields(newState, pl.id)\n                };\n                // return the updated FormState\n                return {\n                    ...newState,\n                    inputs: {\n                        ...newState.inputs\n                    },\n                    isValid: validateState(newState)\n                };\n            } catch (err) {\n                process.env.NODE_ENV !== 'test' &&\n                    console.error(\n                        `use-form-state cannot recognize input-id '${pl.id}'. Please make sure that all form input names are tied to a form element, such as <input id='${pl.id}' />.`\n                    );\n                break;\n            }\n        case FormAction.INPUT_TOUCH:\n            try {\n                return {\n                    ...state,\n                    inputs: {\n                        ...state.inputs,\n                        [pl.id]: {\n                            ...state.inputs[pl.id],\n                            isTouched: true\n                        }\n                    }\n                };\n            } catch (err) {\n                process.env.NODE_ENV !== 'test' &&\n                    console.error(\n                        `use-form-state cannot recognize input-id '${pl.id}'. Please make sure that all form input names are tied to a form element, such as <input id='${pl.id}' />.`\n                    );\n                break;\n            }\n        case FormAction.SET_FORM:\n            if (typeof pl.state !== 'undefined') {\n                return { ...(pl.state as S) };\n            } else {\n                return state;\n            }\n        default:\n            break;\n    }\n    return state;\n}\n\nfunction getState<S extends FormEntryConstraint>(\n    initialState: FormState<S> | Inputs<S>\n): FormState<S> {\n    let state: FormState<S>;\n    if (\n        Object.keys(initialState).length === 2 &&\n        typeof initialState.inputs !== 'undefined' &&\n        typeof initialState.isValid !== 'undefined'\n    ) {\n        state = { ...(initialState as FormState<S>) };\n    } else {\n        state = {\n            inputs: { ...(initialState as Inputs<S>) },\n            isValid: false\n        };\n        state.isValid = validateState(state);\n    }\n    return state;\n}\n\n/**\n * React hook for managing the state of a form and its associated inputs.\n *\n * @param initialState - Object with initial FormState or initial Inputs\n\n * @returns Object of UseForm type with specified properties and types.\n */\nfunction useForm<S extends FormEntryConstraint>(\n    initialState: FormState<S> | Inputs<S>\n): UseForm<S> {\n    const [formState, dispatch] = useReducer<Reducer<FormState<S>, ReducerAction>>(formReducer, {\n        ...getState(initialState)\n    });\n\n    const setFormState = useCallback((state: FormState<S> | Inputs<S>): void => {\n        dispatch({\n            type: FormAction.SET_FORM,\n            payload: { state: { ...getState(state) }, value: '', id: '' }\n        });\n    }, []);\n\n    const onTouchHandler: React.FocusEventHandler<FormElementConstraint> = useCallback((event) => {\n        dispatch({ type: FormAction.INPUT_TOUCH, payload: { id: event.target.id, value: '' } });\n    }, []);\n\n    const onChangeHandler: React.ChangeEventHandler<FormElementConstraint> = useCallback(\n        (event) => {\n            dispatch({\n                type: FormAction.INPUT_CHANGE,\n                payload: {\n                    id: event.target.id,\n                    value: event.target.value\n                }\n            });\n        },\n        []\n    );\n\n    return { formState, onChangeHandler, onTouchHandler, setFormState };\n}\n\nexport default useForm;\n"],"names":["useReducer","useCallback"],"mappings":"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"}